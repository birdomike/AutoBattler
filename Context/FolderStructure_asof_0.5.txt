Built by Gemini- May not be 100% accurate. 

[+] assets                      # Root folder for all static game assets (images, sounds, CSS)
    [+] audio                   # Sound effects and music files
        - placeholder.txt       # Placeholder, indicates folder exists but may be empty
        - README.md             # Instructions or notes about audio assets
    [+] css                     # Cascading Style Sheets for the DOM-based UI
        - style.css             # Main stylesheet for TeamBuilderUI and potentially other DOM elements
    [+] images                  # Visual assets for the game
        [+] Arena Art           # Background images for battle scenes
            - Grassy Field.png  # Example arena background
            - Grassy Field_Old.png # Older version, likely unused
        [+] Character Art       # Full portrait/sprite artwork for each character
            - Aqualia.png       # (and others...) Artwork files named after characters
        [+] icons               # Smaller images, typically for UI elements or status effects
            [+] status          # Icons specifically related to status effects
                [+] status-icons# Standardized status effect icon images
                    - atk_down.png  # (and many others...) Individual status effect icons
                - generate_placeholder_icons.html # Utility to create placeholder icons if needed
                - README.md             # Notes about status icons
                - status-icons.zip      # Archive of status icons (backup or distribution)

[+] Changelogs                  # Folder containing markdown files documenting changes across versions
    - changelog.md              # Main changelog file
    - CHANGELOG_X.Y.Z.md        # Version-specific detailed changelogs

[+] Context                     # Documents providing project context, plans, and design decisions
    - Battle_Implementation_Plan - Phase 1 In Depth Plan.md # Detailed plan for the initial Phaser battle implementation phase
    - Battle_Implementation_Plan.md # High-level plan for implementing the Phaser battle scene
    - Lessons Learned.md        # Reflections on challenges and solutions during development (esp. Phaser integration)
    - Version 1.0 Vision.md     # Document outlining the goals and features for the 1.0 release

[+] data                        # Game data files, primarily in JSON format
    [+] status_effects          # (Seems like a misplaced file, likely should be in root data folder)
        - abilities.json        # Potentially intended location for ability data (currently empty/unused?)
    - characters.json           # Defines all character stats, abilities, roles, types, art positioning, etc. CRITICAL DATA FILE.
    - status_effects.json       # Defines all status effects, their behavior, duration, icons, etc. CRITICAL DATA FILE.

[+] examples                    # Sample data or implementation examples
    - passive_character.json    # Example JSON for a character focused on passive abilities
    - PASSIVE_SYSTEM_IMPLEMENTATION.md # Documentation detailing the passive system implementation

[+] js                          # Root folder for all JavaScript code
    [+] battle_logic          # Core logic for how battles run (independent of UI)
        [+] fallback            # Fallback scripts for when ES Modules might fail or aren't supported
            - BattleBehaviors.js # Non-module version of the behavior system
            - SafetyLoader.js   # Ensures BattleManager is loaded, handles timing issues
            - StatusEffectFixes.js # Patches status effect loading if JSON fails
        - ActionDecisionBehaviors.js # Functions defining how characters CHOOSE which ability to use (AI logic)
        - BattleBehaviors.js    # Main interface for accessing ALL behavior functions (targeting, action, passive) - Uses BehaviorRegistry
        - BehaviorRegistry.js   # Central registry for all battle behavior functions (Strategy Pattern implementation)
        - BehaviorRegistryTest.js # Simple utility to test the behavior system in the console
        - index.js              # Exports all components of the battle_logic system for easy import
        - PassiveBehaviors.js   # Functions defining the effects of PASSIVE abilities
        - TargetingBehaviors.js # Functions defining how characters CHOOSE targets
    [+] entities                # Core game object classes (though currently basic)
        - Ability.js            # Represents a character ability (currently simple)
        - Character.js          # Represents a character (currently simple)
    [+] managers                # Classes responsible for managing major game systems
        - BattleManager.js      # CORE BATTLE LOGIC: Manages turn flow, actions, damage/healing calc, status effects. INTENDED TO BE UI INDEPENDENT.
        - BattleManager.js.updates # Backup/update file, likely not used directly
        - TeamManager.js        # Manages player/enemy team composition and character data loading for battles
    [+] phaser                  # Code specifically related to the Phaser framework implementation
        [+] bridge              # Code facilitating communication between core JS logic and Phaser
            - BattleBridge.js   # Links BattleManager events to Phaser BattleScene updates
        [+] components          # Reusable Phaser UI components
            [+] battle          # Components specifically for the Phaser Battle Scene display
                - CharacterSprite.js # Phaser GameObject representing a character visually in battle (art, HP bar, name)
                - TeamContainer.js   # Phaser Container managing positioning and grouping of CharacterSprites for a team
            - Button.js         # Reusable Phaser button component
            - Panel.js          # Reusable Phaser panel/container component
        [+] debug               # Debugging tools specifically for the Phaser environment
            - CoordinateDisplay.js # Phaser Graphics object showing a coordinate grid overlay
            - DebugManager.js   # (Intended) Central manager for Phaser debug tools
            - ObjectIdentifier.js # Phaser tool to identify GameObjects under the cursor
        [+] scenes              # Phaser Scene classes
            - BattleScene - Copy.js # Backup/old version of BattleScene
            - BattleScene.js    # THE PHASER SCENE responsible for VISUALLY rendering the battle
            - BootScene.js      # Initial Phaser scene, likely for loading essential assets (currently basic)
            - TeamBuilderScene.js # Placeholder Phaser scene for the Team Builder (intended to replace DOM version eventually, but not priority V1)
        - assets.js             # Phaser-specific asset management helper (potentially redundant?)
        - bridge.js             # (Likely older/alternate bridge implementation, BattleBridge.js is primary)
        - config.js             # (Likely older/alternate config, PhaserConfig.js is primary)
        - PhaserConfig.js       # Utility for creating the Phaser game configuration object
        - uiManager.js          # Manages switching between the DOM UI and the Phaser canvas/scenes
    [+] ui                      # Code related to the **DOM-based UI**
        - BattleUI.js           # Manages the **DOM-based** battle interface (displays teams, log, controls using HTML/CSS). BEING REPLACED by BattleScene.js.
        - BattleUIDebug.js      # Debugging utilities specifically for the DOM-based BattleUI
        - SoundManager.js       # Handles loading and playing sound effects (used by DOM UI)
        - TeamBuilderUI.js      # Manages the **DOM-based** team builder interface (hero grid, team slots, details). CURRENTLY ACTIVE UI.
        - TeamBuilderUIUpdates.js # Patches/updates TeamBuilderUI, includes logic to transition TO Phaser battle.
        - TooltipManager.js     # Manages displaying tooltips for DOM elements
    [+] utilities               # General helper scripts
        - DirectImageLoader.js  # Utility specifically for loading character art in the **DOM Battle UI**. (May conflict/overlap with TeamBuilderImageLoader)
        - ImageDebugger.js      # Utility to test image loading paths
        - TeamBuilderImageLoader.js # Utility to load and inject character art into the **DOM Team Builder UI**. Handles art preloading.
    - game.js                   # Main entry point. Initializes managers, UIs, and the Phaser game instance. CRITICAL INITIALIZATION SCRIPT.

[+] lib                         # External libraries
    - phaser-download-instructions.md # Notes on getting Phaser
    - phaser.min.js             # The Phaser 3 library file

[+] _CombinedForAI              # Folder for helper scripts used to package files for you (Gemini)
    - CombineforAI_Tool.ps1     # PowerShell script to combine files
    - FolderStructure.txt       # The output file listing the structure (you're reading this!)
    - Get_FileStructure_ofGame.ps1 # PowerShell script to generate the structure file

- Base Stat Template.md         # Template/notes on base stats for characters
- Claude - Copy.txt             # Copy of interaction/context provided to the Claude AI
- Claude.md                     # (Likely original context/notes for Claude)
- Development_Plan.md           # High-level development roadmap and phases
- GeminiSuggestions.md          # Notes/suggestions provided by Gemini (likely regarding architecture)
- index.html                    # Main HTML file, entry point for the browser, loads scripts and CSS
- project.config                # Configuration file for game settings (like dimensions, title)
- README.md                     # Main project readme file
- Role Base Stat Template.md    # Template/notes on role-specific stats
- Role Based Stat Multipliers.md# Details on how roles affect stat growth/multipliers
- Role Chart.md                 # List/description of character roles
- Type Chart.md                 # List/description of character types
- Type Effectiveness Table.md   # Defines strengths/weaknesses between types