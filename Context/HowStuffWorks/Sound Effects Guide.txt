🎵 AutoBattler Audio System: Complete Implementation Guide 🎵

This document provides the definitive guide for implementing ability sound effects and maintaining the AutoBattler's 4-tier audio system, based on proven working implementations.

═══════════════════════════════════════════════════════════════════

I. SYSTEM ARCHITECTURE OVERVIEW 🏗️

The AutoBattler audio system uses a 4-tier hierarchical resolution with component-based architecture, bridging game logic to Phaser's Web Audio API through event-driven patterns.

A. Core Design Principles:
• Data-Driven Configuration: Sound mappings in JSON structures (AudioAssetMappings.js)
• Hierarchical Resolution: 4-tier fallback (ability → character → genre → defaults)
• Event-Based Triggering: Loose coupling via game events
• Performance Optimization: Caching, pooling, and efficient resource management
• Browser Compatibility: Audio context suspension handling and autoplay support
• File Format Support: .wav, .mp3, and other Phaser-supported formats

B. The 4-Tier Hierarchical Resolution System:

Tier 1: Ability-Specific Sounds (Highest Priority)
  Example: zephyr_wind_slash.cast → "ability_specific/Zephyr/Wind_Slash.mp3"
  Purpose: Unique sounds for specific abilities
  Location: AudioAssetMappings.abilities[abilityId][event]
  Status: ✅ FULLY IMPLEMENTED and working (confirmed with Zephyr's Wind Slash)

Tier 2: Character-Specific Sounds (High Priority)
  Example: Sylvanna auto-attack → "character_specific/Sylvanna/Bow_Attack_1.wav"
  Purpose: Unique sounds for iconic characters
  Location: AudioAssetMappings.character_specific[characterName]
  Status: ✅ FULLY IMPLEMENTED (Sylvanna has unique bow sounds)

Tier 3: Genre-Specific Sounds (Medium Priority)
  Example: Sword fighters → "genre_specific/Sword_Melee_Genre/Sword_Attack_2.wav"
  Purpose: Shared sounds for character archetypes
  Location: AudioAssetMappings.genre_specific[genreName]
  Status: ✅ FULLY IMPLEMENTED (sword_melee_genre, frost_caster, etc.)

Tier 4: Default Fallback Sounds (Lowest Priority)
  Example: Generic cast → "defaults/abilities/generic_cast/magic_buildup.wav"
  Purpose: Universal fallback sounds
  Location: AudioAssetMappings.defaults
  Status: ✅ AUTO-ATTACK defaults implemented, ABILITY defaults ready for use

═══════════════════════════════════════════════════════════════════

II. PROVEN STRATEGY: IMPLEMENTING NEW ABILITY SOUNDS 🎯

**IMPORTANT**: This process is confirmed working as of the Zephyr Wind Slash implementation.

STEP 1: PREPARE THE AUDIO FILE
1. Obtain your .mp3 or .wav file (e.g., "Epic_Fire_Blast.mp3")
2. Test the file plays correctly in your audio editor
3. Place it in: `assets/audio/InCombat_Sounds/ability_specific/[CharacterName]/[AbilityName].[ext]`
   Example: `assets/audio/InCombat_Sounds/ability_specific/Zephyr/Wind_Slash.mp3`

STEP 2: IDENTIFY THE ABILITY ID
1. Open `data/characters.json`
2. Find your character's ability definition
3. Copy the exact `"id"` value (NOT the "name")
   Example: `"id": "zephyr_wind_slash"` (NOT "Wind Slash")

STEP 3: CONFIGURE AUDIDASSETMAPPINGS.JS
1. Open `js/data/AudioAssetMappings.js`
2. In the `abilities` section, add your mapping:

```javascript
// Example implementation
'zephyr_wind_slash': {
  cast: {
    path: 'ability_specific/Zephyr/Wind_Slash.mp3',
    variations: false
  }
},
'drakarion_flame_strike': {
  cast: {
    path: 'ability_specific/Drakarion/Epic_Fire_Blast.mp3',
    variations: false
  }
}
```

Event Types Available:
- `cast`: When ability is initiated (most common)
- `impact`: When ability hits target
- `effect`: During ability effects
- `travel`: For projectile abilities (not yet implemented)

STEP 4: VERIFY THE LOADING SYSTEM
No changes needed! SoundAssetLoader.js automatically:
- Scans AudioAssetMappings.abilities during BattleScene.preload()
- Generates cache key: `ability_specific_[abilityid]_mp3`
- Preloads the file into Phaser's audio cache

STEP 5: TEST IN-GAME
1. Start a battle with your character
2. Use the ability in battle
3. Listen for the sound

STEP 6: TROUBLESHOOT (IF NEEDED)
Check browser console for these logs:

✅ Success Indicators:
```
[SoundAssetLoader] Found ability: zephyr_wind_slash for event: cast
[SoundAssetLoader] Path: ability_specific/Zephyr/Wind_Slash.mp3, Key: ability_specific_zephyr_wind_slash_mp3
[SoundEventHandler] Extracted abilityId for sound lookup: 'zephyr_wind_slash'
[SoundEventHandler] ✅ Found Tier 1 ability sound for zephyr_wind_slash.cast
[BattleSoundManager] ✅ Playing ability sound: ability_specific_zephyr_wind_slash_mp3
```

❌ Error Indicators:
```
[SoundEventHandler] ❌ No ability ID found in action
[BattleSoundManager] Sound key 'ability_specific_...' not found in Phaser audio cache!
```

═══════════════════════════════════════════════════════════════════

III. SYSTEM STATUS UPDATES 📊

**CRITICAL FIX IMPLEMENTED** (2025-05-18):
Fixed the primary cause of ability sound failures by adding `abilityId` property to CHARACTER_ACTION events in BattleFlowController.js. This allows SoundEventHandler.js to properly extract ability IDs for Tier 1 resolution.

**Current Working Status**:
✅ Auto-Attack Sounds: Fully working (all tiers)
✅ Ability Sounds (Tier 1): Fully working (confirmed with Zephyr Wind Slash)
✅ Asset Loading: Automatic via SoundAssetLoader.js
✅ Event Pipeline: CHARACTER_ACTION events properly dispatch abilityId
✅ Sound Resolution: 4-tier hierarchy working correctly
⚠️ Tier 4 Ability Defaults: Infrastructure exists but needs loading implementation

**Files Modified During Implementation**:
- BattleFlowController.js: Added abilityId to CHARACTER_ACTION events
- SoundEventHandler.js: Fixed circular dependency, improved ability resolution
- SoundAssetLoader.js: Enhanced debug logging for ability loading
- AudioAssetMappings.js: Added confirmed ability mappings

═══════════════════════════════════════════════════════════════════

IV. COMPLETE AUDIO PIPELINE 🔄

1. **Asset Loading Phase** (Game Startup):
   - SoundAssetLoader.js scans AudioAssetMappings.js
   - Generates cache keys: `ability_specific_[abilityid]_[event]_[ext]`
   - Preloads files into Phaser's audio cache

2. **Event Triggering** (During Battle):
   - BattleFlowController.js dispatches CHARACTER_ACTION events
   - Event includes: character, action{type, abilityId, name, target}

3. **Sound Resolution** (Event Handling):
   - SoundEventHandler.js receives CHARACTER_ACTION
   - Extracts abilityId from action.abilityId
   - Calls AudioAssetMappings.helpers.getAbilitySound(abilityId, 'cast')
   - Falls back through 4-tier hierarchy if needed

4. **Audio Playback** (Final Step):
   - BattleSoundManager.playSound() with resolved cache key
   - Phaser handles actual audio output

═══════════════════════════════════════════════════════════════════

V. AUTO-ATTACK SOUNDS (REFERENCE) 🏹

**Status**: Fully implemented and working

**Character Sound Profiles** (in AbilityAnimationConfig.js):
```javascript
characterSoundProfiles: {
  'drakarion': 'genre_specific/sword_melee_genre',
  'caste': 'genre_specific/sword_melee_genre',
  'vaelgor': 'genre_specific/sword_melee_genre',
  'sylvanna': 'character_specific/sylvanna',
  'zephyr': 'genre_specific/sword_melee_genre',
  'lumina': null, // Uses defaults
  'aqualia': null, // Uses defaults
  'nyria': null // Uses defaults
}
```

**Timing Configuration** (in SoundEventHandler.js):
- Melee attacks: 0ms delay (impact timing)
- Ranged attacks: 0ms delay (release timing)

═══════════════════════════════════════════════════════════════════

VI. ADVANCED CONFIGURATIONS ⚙️

**Multiple Events Per Ability**:
```javascript
'complex_ability_id': {
  cast: { path: 'ability_specific/Character/Cast.mp3' },
  impact: { path: 'ability_specific/Character/Impact.mp3' },
  effect: { path: 'ability_specific/Character/Effect.mp3' }
}
```

**Custom Timing** (in SoundEventHandler.js):
```javascript
this.timingConfig = {
  abilities: {
    default: { cast: { delay: 0 } },
    'special_ability_id': { cast: { delay: 500 } }
  }
}
```

**Sound Variations** (future feature):
```javascript
'ability_with_variants': {
  cast: {
    path: 'ability_specific/Character/Cast_',
    variations: true, // Adds _1, _2, _3 etc.
    count: 3
  }
}
```

═══════════════════════════════════════════════════════════════════

VII. TROUBLESHOOTING REFERENCE 🔧

**Problem**: No sound plays for new ability
**Solution**: Check these in order:
1. Verify file exists at specified path
2. Check AudioAssetMappings.js entry is correct
3. Confirm abilityId matches characters.json exactly
4. Check browser console for loading errors
5. Test cache: `game.cache.audio.entries.keys()`

**Problem**: "Sound key not found in Phaser audio cache"
**Solution**: File loading issue. Check:
1. SoundAssetLoader.js is called in BattleScene.preload()
2. File path is correct and accessible
3. No typos in AudioAssetMappings.js entry

**Problem**: "No ability ID found in action"
**Solution**: BattleFlowController.js issue (should be fixed):
1. Verify CHARACTER_ACTION includes abilityId property
2. Check ability has valid 'id' in characters.json

**Problem**: Audio context suspended
**Solution**: Handled automatically by SoundEventHandler.js
- Browser requires user interaction before playing audio
- System will resume context on first user click

═══════════════════════════════════════════════════════════════════

VIII. TESTING COMMANDS 🧪

**Test Ability Resolution**:
```javascript
AudioAssetMappings.helpers.getAbilitySound('zephyr_wind_slash', 'cast')
// Should return: { path: 'ability_specific/Zephyr/Wind_Slash.mp3' }
```

**Check Phaser Cache**:
```javascript
game.cache.audio.entries.keys()
// Should include: 'ability_specific_zephyr_wind_slash_mp3'
```

**Test Audio Context**:
```javascript
game.sound.context.state
// Should be: 'running'
```

═══════════════════════════════════════════════════════════════════

IX. FUTURE EXPANSIONS 🚀

**Character Voice Lines**: Extend abilities mapping with voice events
**Environmental Audio**: Add ambient battlefield sounds
**Ability Impact Sounds**: Implement 'impact' event timing
**Sound Variations**: Random selection from multiple files
**Dynamic Volume**: Based on distance, character stats, etc.

═══════════════════════════════════════════════════════════════════

This guide reflects the current working state of the audio system as of 2025-05-18, incorporating all fixes and proven implementations. The ability sound system is now fully operational and ready for expansion.

