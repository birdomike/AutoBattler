

===== FILE: assets.js =====
/**
 * Assets Manager
 * Handles loading and organizing game assets
 */
class AssetsManager {
    constructor() {
        // Will store information about assets
        this.assets = {
            // Character assets
            characters: {},
            
            // UI assets
            ui: {},
            
            // Effect assets
            effects: {},
            
            // Arena backgrounds
            arenas: {}
        };
    }
    
    /**
     * Initialize the assets manager
     */
    initialize() {
        // Catalog arena backgrounds
        this.catalogArenaBackgrounds();
        
        // Catalog UI assets
        this.catalogUIAssets();
        
        // Catalog character assets
        this.catalogCharacterAssets();
        
        console.log('AssetsManager: Initialized');
    }
    
    /**
     * Catalog available arena backgrounds
     */
    catalogArenaBackgrounds() {
        // Get arena backgrounds from existing game
        this.assets.arenas = {
            'default': 'assets/images/Arena Art/default.png',
            'grassyfield': 'assets/images/Arena Art/Grassy Field.png'
            // More will be added as they become available
        };
    }
    
    /**
     * Catalog UI assets
     */
    catalogUIAssets() {
        // Basic UI assets
        this.assets.ui = {
            // Buttons
            'button': 'assets/images/ui/button.png',
            'button-hover': 'assets/images/ui/button-hover.png',
            
            // Panels
            'panel': 'assets/images/ui/panel.png',
            'slot': 'assets/images/ui/slot.png',
            
            // Icons
            'health-icon': 'assets/images/icons/health.png',
            'attack-icon': 'assets/images/icons/attack.png',
            'defense-icon': 'assets/images/icons/defense.png',
            'speed-icon': 'assets/images/icons/speed.png'
            
            // More will be added as needed
        };
    }
    
    /**
     * Catalog character assets
     */
    catalogCharacterAssets() {
        // Use the existing TeamBuilderImageLoader to get character images
        if (window.TeamBuilderImageLoader) {
            const loader = new window.TeamBuilderImageLoader();
            this.assets.characters = loader.characterImages || {};
        } else {
            // Fallback to hard-coded paths
            this.assets.characters = {
                'Aqualia': 'assets/images/Character Art/Aqualia.png',
                'Vaelgor': 'assets/images/Character Art/Vaelgor.png',
                'Sylvanna': 'assets/images/Character Art/Sylvanna.png',
                'Lumina': 'assets/images/Character Art/Lumina.png'
                // More can be added as they become available
            };
        }
    }
    
    /**
     * Get the path to a character image
     * @param {string} characterName - The name of the character
     * @returns {string} The path to the character image
     */
    getCharacterImagePath(characterName) {
        return this.assets.characters[characterName] || '';
    }
    
    /**
     * Get the path to an arena background
     * @param {string} arenaKey - The key of the arena
     * @returns {string} The path to the arena background
     */
    getArenaBackgroundPath(arenaKey) {
        return this.assets.arenas[arenaKey] || this.assets.arenas['default'];
    }
    
    /**
     * Get the path to a UI asset
     * @param {string} assetKey - The key of the UI asset
     * @returns {string} The path to the UI asset
     */
    getUIAssetPath(assetKey) {
        return this.assets.ui[assetKey] || '';
    }
    
    /**
     * Preload assets into a Phaser scene
     * @param {Phaser.Scene} scene - The scene to preload assets into
     * @param {string} type - The type of assets to preload ('characters', 'ui', 'arenas', 'all')
     */
    preloadAssets(scene, type = 'all') {
        if (!scene || !scene.load) {
            console.error('AssetsManager: Invalid scene provided for preloading');
            return;
        }
        
        // Preload character assets
        if (type === 'all' || type === 'characters') {
            for (const [name, path] of Object.entries(this.assets.characters)) {
                if (path) {
                    scene.load.image(`character-${name.toLowerCase()}`, path);
                }
            }
        }
        
        // Preload UI assets
        if (type === 'all' || type === 'ui') {
            for (const [key, path] of Object.entries(this.assets.ui)) {
                if (path) {
                    scene.load.image(`ui-${key}`, path);
                }
            }
        }
        
        // Preload arena backgrounds
        if (type === 'all' || type === 'arenas') {
            for (const [key, path] of Object.entries(this.assets.arenas)) {
                if (path) {
                    scene.load.image(`arena-${key}`, path);
                }
            }
        }
    }
}


===== FILE: bridge.js =====
/**
 * Game Bridge (LEGACY SYSTEM)
 * Provides communication between existing game logic and Phaser UI
 * 
 * NOTE: This is a legacy bridge that is being replaced by BattleBridge.
 * It is kept for compatibility but should not be used for new development.
 */
class GameBridge {
    constructor() {
        // References to key game components
        this.teamManager = null;
        this.battleManager = null;
        
        // Event listeners for game events
        this.eventListeners = {};
        
        // IMPORTANT: Do not overwrite the global BattleBridge class or instance
        console.log('GameBridge: Created legacy bridge - this system is deprecated');
        console.log('GameBridge: Preserving existing BattleBridge if it exists');
    }
    
    /**
     * Initialize the bridge with game managers
     * @param {Object} teamManager - The team manager instance
     * @param {Object} battleManager - The battle manager instance
     */
    initialize(teamManager, battleManager) {
        this.teamManager = teamManager;
        this.battleManager = battleManager;
        
        // Set up event system
        this.setupEvents();
        
        console.log('GameBridge: Initialized');
    }
    
    /**
     * Set up event system for communication
     */
    setupEvents() {
        // Create a custom event system for game events
        this.eventTypes = {
            TEAM_UPDATED: 'team_updated',
            BATTLE_STARTED: 'battle_started',
            BATTLE_ENDED: 'battle_ended',
            CHARACTER_ACTION: 'character_action',
            CHARACTER_DAMAGED: 'character_damaged',
            CHARACTER_HEALED: 'character_healed',
            CHARACTER_DEFEATED: 'character_defeated',
            STATUS_EFFECT_APPLIED: 'status_effect_applied',
            ABILITY_USED: 'ability_used'
        };
        
        // Initialize event listeners
        Object.values(this.eventTypes).forEach(type => {
            this.eventListeners[type] = [];
        });
        
        console.log('GameBridge: Event system set up');
    }
    
    /**
     * Add an event listener for a game event
     * @param {string} eventType - The type of event to listen for
     * @param {Function} callback - The callback function to execute
     */
    addEventListener(eventType, callback) {
        if (!this.eventListeners[eventType]) {
            this.eventListeners[eventType] = [];
        }
        
        this.eventListeners[eventType].push(callback);
    }
    
    /**
     * Remove an event listener
     * @param {string} eventType - The type of event
     * @param {Function} callback - The callback function to remove
     */
    removeEventListener(eventType, callback) {
        if (!this.eventListeners[eventType]) return;
        
        const index = this.eventListeners[eventType].indexOf(callback);
        if (index !== -1) {
            this.eventListeners[eventType].splice(index, 1);
        }
    }
    
    /**
     * Dispatch a game event
     * @param {string} eventType - The type of event to dispatch
     * @param {Object} data - The data to pass to event listeners
     */
    dispatchEvent(eventType, data) {
        if (!this.eventListeners[eventType]) return;
        
        this.eventListeners[eventType].forEach(callback => {
            try {
                callback(data);
            } catch (error) {
                console.error(`GameBridge: Error in event listener for ${eventType}`, error);
            }
        });
    }
    
    /**
     * Patch into BattleManager to receive battle events
     */
    patchBattleManager() {
        if (!this.battleManager) {
            console.error('GameBridge: BattleManager not available for patching');
            return;
        }
        
        // Store original functions
        const originalApplyDamage = this.battleManager.applyDamage;
        const originalApplyHealing = this.battleManager.applyHealing;
        const originalProcessAbility = this.battleManager.processAbility;
        const originalAddStatusEffect = this.battleManager.addStatusEffect;
        const originalStartBattle = this.battleManager.startBattle;
        const originalEndBattle = this.battleManager.endBattle;
        
        // Patch functions to add event dispatching
        const self = this;
        
        // Patch damage function
        this.battleManager.applyDamage = function(target, amount, source) {
            const result = originalApplyDamage.call(this, target, amount, source);
            
            // Dispatch event
            self.dispatchEvent(self.eventTypes.CHARACTER_DAMAGED, {
                target,
                amount,
                source,
                result
            });
            
            // Check for defeat
            if (target.stats.hp <= 0) {
                self.dispatchEvent(self.eventTypes.CHARACTER_DEFEATED, {
                    character: target,
                    source
                });
            }
            
            return result;
        };
        
        // Patch healing function
        this.battleManager.applyHealing = function(target, amount, source) {
            const result = originalApplyHealing.call(this, target, amount, source);
            
            // Dispatch event
            self.dispatchEvent(self.eventTypes.CHARACTER_HEALED, {
                target,
                amount,
                source,
                result
            });
            
            return result;
        };
        
        // Patch ability processing
        this.battleManager.processAbility = function(character, ability, targets) {
            const result = originalProcessAbility.call(this, character, ability, targets);
            
            // Dispatch event
            self.dispatchEvent(self.eventTypes.ABILITY_USED, {
                character,
                ability,
                targets,
                result
            });
            
            return result;
        };
        
        // Patch status effect application
        this.battleManager.addStatusEffect = function(target, effect, source) {
            const result = originalAddStatusEffect.call(this, target, effect, source);
            
            // Dispatch event
            self.dispatchEvent(self.eventTypes.STATUS_EFFECT_APPLIED, {
                target,
                effect,
                source,
                result
            });
            
            return result;
        };
        
        // Patch battle start
        this.battleManager.startBattle = function(playerTeam, enemyTeam) {
            const result = originalStartBattle.call(this, playerTeam, enemyTeam);
            
            // Dispatch event
            self.dispatchEvent(self.eventTypes.BATTLE_STARTED, {
                playerTeam,
                enemyTeam
            });
            
            return result;
        };
        
        // Patch battle end
        this.battleManager.endBattle = function(winner) {
            const result = originalEndBattle.call(this, winner);
            
            // Dispatch event
            self.dispatchEvent(self.eventTypes.BATTLE_ENDED, {
                winner,
                playerTeam: this.playerTeam,
                enemyTeam: this.enemyTeam
            });
            
            return result;
        };
        
        console.log('GameBridge: BattleManager patched for event dispatching');
    }
    
    /**
     * Patch into TeamManager to receive team events
     */
    patchTeamManager() {
        if (!this.teamManager) {
            console.error('GameBridge: TeamManager not available for patching');
            return;
        }
        
        // Store original functions
        const originalSetPlayerTeam = this.teamManager.setPlayerTeam;
        const originalSetCustomEnemyTeam = this.teamManager.setCustomEnemyTeam;
        
        // Patch functions to add event dispatching
        const self = this;
        
        // Patch player team setting
        this.teamManager.setPlayerTeam = function(team) {
            const result = originalSetPlayerTeam.call(this, team);
            
            // Dispatch event
            self.dispatchEvent(self.eventTypes.TEAM_UPDATED, {
                team: 'player',
                characters: team
            });
            
            return result;
        };
        
        // Patch enemy team setting
        this.teamManager.setCustomEnemyTeam = function(team) {
            const result = originalSetCustomEnemyTeam.call(this, team);
            
            // Dispatch event
            self.dispatchEvent(self.eventTypes.TEAM_UPDATED, {
                team: 'enemy',
                characters: team
            });
            
            return result;
        };
        
        console.log('GameBridge: TeamManager patched for event dispatching');
    }
    
    /**
     * Get player team from TeamManager
     * @returns {Array} The player team
     */
    getPlayerTeam() {
        return this.teamManager ? this.teamManager.playerTeam : [];
    }
    
    /**
     * Get enemy team from TeamManager
     * @returns {Array} The enemy team
     */
    getEnemyTeam() {
        return this.teamManager ? this.teamManager.enemyTeam : [];
    }
    
    /**
     * Start a battle with the current teams
     */
    startBattle() {
        if (!this.battleManager) {
            console.error('GameBridge: BattleManager not available for battle');
            return;
        }
        
        // Start the battle with current teams
        const playerTeam = this.getPlayerTeam();
        const enemyTeam = this.getEnemyTeam();
        
        this.battleManager.startBattle(playerTeam, enemyTeam);
    }
}


===== FILE: config.js =====
/**
 * Phaser Game Configuration
 * This file contains the configuration for the Phaser game instance
 */

class PhaserConfig {
    /**
     * Create a Phaser game configuration
     * @param {Object} gameConfig - The game configuration settings
     * @returns {Object} Phaser game configuration object
     */
    static create(gameConfig) {
        // Default settings if not provided
        const width = gameConfig?.width || 1920;
        const height = gameConfig?.height || 1080;
        
        return {
            type: Phaser.AUTO,
            width: width,
            height: height,
            parent: 'phaser-container',
            backgroundColor: '#141e2e',
            transparent: true,
            scale: {
                mode: Phaser.Scale.FIT,
                autoCenter: Phaser.Scale.CENTER_BOTH
            },
            // We'll add scenes dynamically after they're loaded
            scene: []
        };
    }
    
    /**
     * Initialize the Phaser container in the DOM
     * @param {string} parentId - The ID of the parent container
     * @returns {HTMLElement} The created Phaser container
     */
    static initContainer(parentId = 'game-container') {
        const gameContainer = document.getElementById(parentId);
        
        // Check if container already exists
        let phaserContainer = document.getElementById('phaser-container');
        if (phaserContainer) {
            return phaserContainer;
        }
        
        // Create container if it doesn't exist
        phaserContainer = document.createElement('div');
        phaserContainer.id = 'phaser-container';
        phaserContainer.style.position = 'absolute';
        phaserContainer.style.top = '0';
        phaserContainer.style.left = '0';
        phaserContainer.style.width = '100%';
        phaserContainer.style.height = '100%';
        phaserContainer.style.zIndex = '0';
        gameContainer.appendChild(phaserContainer);
        
        return phaserContainer;
    }
}


===== FILE: PhaserConfig.js =====
/**
 * PhaserConfig.js
 * Configuration utilities for Phaser game initialization
 * 
 * @version 0.5.0.3
 */

// Create a self-executing function to avoid global namespace pollution
(function() {
    // Create the PhaserConfig object
    const PhaserConfig = {
        /**
         * Initialize and get the container for Phaser game
         * @param {string} containerId - The ID for the container element
         * @returns {HTMLElement} - The container element
         */
        initContainer: function(containerId) {
            try {
                // Check if container exists
                let container = document.getElementById(containerId);
                
                // Create container if it doesn't exist
                if (!container) {
                    console.log(`Creating Phaser container with ID: ${containerId}`);
                    container = document.createElement('div');
                    container.id = containerId;
                    document.body.appendChild(container);
                }
                
                // Make sure it has proper styling
                container.style.width = '100%';
                container.style.height = '100%';
                container.style.position = 'absolute';
                container.style.top = '0';
                container.style.left = '0';
                container.style.zIndex = '1000';  // Make sure it's above the TeamBuilder UI
                
                // Hide initially
                container.style.display = 'none';
                
                return container;
            } catch (error) {
                console.error('Error initializing Phaser container:', error);
                // Create emergency fallback container
                const fallbackContainer = document.createElement('div');
                fallbackContainer.id = containerId + '-fallback';
                document.body.appendChild(fallbackContainer);
                return fallbackContainer;
            }
        },
        
        /**
         * Create the Phaser game configuration
         * @param {Object} gameConfig - Game configuration from game.js
         * @returns {Object} - Phaser game configuration object
         */
        create: function(gameConfig) {
            return {
                type: Phaser.AUTO,
                width: gameConfig.width || 1280,
                height: gameConfig.height || 720,
                parent: 'game-container',
                backgroundColor: '#333344',
                scene: [], // Scenes will be added after initialization
                render: {
                    pixelArt: false,
                    antialias: true,
                    roundPixels: false, // Need false for smoother scaling
                    powerPreference: 'high-performance',
                    crisp: false, // Don't use crisp pixelated rendering
                    batchSize: 8192, // Increased batch size for performance
                    // Note: setFilter was removed as it's not available in this Phaser version
                    // Instead, we use these render settings for the same effect
                },
                scale: {
                    mode: Phaser.Scale.FIT,
                    autoCenter: Phaser.Scale.CENTER_BOTH
                },
                physics: {
                    default: false  // No physics needed for this game
                }
            };
        },
        
        /**
         * Check if Phaser is properly initialized
         * @returns {boolean} - Whether Phaser is ready
         */
        isPhaserReady: function() {
            return (
                typeof Phaser !== 'undefined' && 
                window.game && 
                window.game.scene
            );
        }
    };
    
    // Make PhaserConfig available globally
    window.PhaserConfig = PhaserConfig;
    
    console.log('PhaserConfig initialized successfully');
})();


===== FILE: StatusIconMapper.js =====
/**
 * StatusIconMapper - Maps status effect IDs to icon paths
 * Centralizes the mapping between status effect IDs and their corresponding icon files
 */
class StatusIconMapper {
    /**
     * Get the complete mapping of status IDs to icon paths
     * @returns {Object} Mapping of status IDs to icon paths
     */
    static getMapping() {
        return {
            'atk_down': 'AI_Icons/32px/Attack Down_AI.png',
            'atk_up': 'AI_Icons/32px/AttackUp.png',
            'bleed': 'AI_Icons/32px/Bleeding_AI.png',
            'burn': 'AI_Icons/32px/Burn_AI.png',
            'crit_up': 'AI_Icons/32px/CritChanceUp_AI.png',
            'def_down': 'AI_Icons/32px/Defense Down_AI.png',
            'def_up': 'AI_Icons/32px/Defense Up_AI.png',
            'evade': 'AI_Icons/32px/Evasion_AI.png',
            'freeze': 'AI_Icons/32px/Freeze_AI.png',
            'immune': 'AI_Icons/32px/Immunity_AI.png',
            'int_down': 'AI_Icons/32px/IntellectDown_AI.png',
            'int_up': 'AI_Icons/32px/Intellect Up_AI.png',
            'poison': 'AI_Icons/32px/Poison_AI.png',
            'reflect': 'AI_Icons/32px/DamageReflect_AI.png',
            'regen': 'AI_Icons/32px/Regeneration_AI.png',
            'shield': 'AI_Icons/32px/Shield_AI.png',
            'spd_down': 'AI_Icons/32px/Speed Down_AI.png',
            'spd_up': 'AI_Icons/32px/Speed Up_AI.png',
            'spi_down': 'AI_Icons/32px/SpiritDown_AI.png',
            'spi_up': 'AI_Icons/32px/SpiritUp_AI.png',
            'str_down': 'AI_Icons/32px/StrengthDown_AI.png',
            'str_up': 'AI_Icons/32px/StrengthUp_AI.png',
            'stun': 'AI_Icons/32px/Stunned_AI.png',
            'taunt': 'AI_Icons/32px/Taunt_AI.png',
            'vulnerable': 'AI_Icons/32px/Vulnerable_AI.png'
        };
    }
    
    /**
     * Get the icon path for a specific status ID
     * @param {string} statusId - The status effect ID
     * @returns {string} The path to the icon file
     */
    static getPath(statusId) {
        const mapping = this.getMapping();
        return mapping[statusId] || `${statusId}.png`;
    }
}

// Make available globally for non-module code
window.StatusIconMapper = StatusIconMapper;


===== FILE: uiManager.js =====
/**
 * UI Manager
 * Handles switching between DOM and Phaser UIs
 */
class UIManager {
    constructor() {
        this.currentUI = 'dom'; // 'dom' or 'phaser'
        this.game = null; // Will hold the Phaser game instance
        this.scenes = {}; // Will hold references to scenes
    }
    
    /**
     * Initialize the UI Manager
     * @param {Object} game - Phaser game instance
     */
    initialize(game) {
        this.game = game;
        
        // Store references to DOM elements
        this.domElements = {
            teamBuilder: document.getElementById('team-builder-container'),
            gameContainer: document.getElementById('game-container'),
            phaserContainer: document.getElementById('phaser-container')
        };
        
        // Add UI toggle buttons to DOM
        this.addDomToggleButtons();
        
        console.log('UIManager: Initialized');
    }
    
    /**
     * Add toggle buttons to the DOM UI
     */
    addDomToggleButtons() {
        // Create toggle button for team builder
        const teamBuilderContainer = this.domElements.teamBuilder;
        if (teamBuilderContainer) {
            const toggleButton = document.createElement('button');
            toggleButton.textContent = 'Try Phaser UI';
            toggleButton.className = 'phaser-toggle-btn';
            toggleButton.style.position = 'absolute';
            toggleButton.style.top = '20px';
            toggleButton.style.right = '20px';
            toggleButton.style.zIndex = '1000';
            toggleButton.style.backgroundColor = '#3742fa';
            toggleButton.style.color = 'white';
            toggleButton.style.border = 'none';
            toggleButton.style.padding = '8px 16px';
            toggleButton.style.borderRadius = '4px';
            toggleButton.style.cursor = 'pointer';
            
            toggleButton.addEventListener('click', () => {
                this.showPhaserUI('TeamBuilderScene');
            });
            
            teamBuilderContainer.appendChild(toggleButton);
        }
        
        // The battle UI toggle button will be added when battle starts
    }
    
    /**
     * Register a scene with the UI Manager
     * @param {string} key - The scene key
     * @param {Phaser.Scene} scene - The scene instance
     */
    registerScene(key, scene) {
        this.scenes[key] = scene;
    }
    
    /**
     * Show the DOM UI
     */
    showDomUI() {
        // Hide Phaser container
        if (this.domElements.phaserContainer) {
            this.domElements.phaserContainer.style.display = 'none';
        }
        
        // Show appropriate DOM container based on current context
        if (this.currentUI === 'battle') {
            // Show game container for battle
            if (this.domElements.gameContainer) {
                this.domElements.gameContainer.classList.add('active');
            }
            
            // Hide team builder
            if (this.domElements.teamBuilder) {
                this.domElements.teamBuilder.classList.remove('active');
            }
        } else {
            // Show team builder for team selection
            if (this.domElements.teamBuilder) {
                this.domElements.teamBuilder.classList.add('active');
            }
            
            // Hide game container
            if (this.domElements.gameContainer) {
                this.domElements.gameContainer.classList.remove('active');
            }
        }
        
        this.currentUI = 'dom';
        console.log('UIManager: Switched to DOM UI');
    }
    
    /**
     * Show the Phaser UI with the specified scene
     * @param {string} sceneKey - The scene to show
     */
    showPhaserUI(sceneKey) {
        // Make sure the game is initialized
        if (!this.game) {
            console.error('UIManager: Phaser game not initialized');
            return;
        }
        
        // Show Phaser container
        if (this.domElements.phaserContainer) {
            this.domElements.phaserContainer.style.display = 'block';
        }
        
        // Hide DOM UI containers
        if (this.domElements.teamBuilder) {
            this.domElements.teamBuilder.classList.remove('active');
        }
        
        if (this.domElements.gameContainer) {
            this.domElements.gameContainer.classList.remove('active');
        }
        
        // Start the appropriate scene
        try {
            // Stop all active scenes
            const activeScenes = this.game.scene.getScenes(true);
            activeScenes.forEach(scene => {
                if (scene.scene.key !== sceneKey) {
                    scene.scene.stop();
                }
            });
            
            // Start or resume the requested scene
            if (!this.game.scene.isActive(sceneKey)) {
                this.game.scene.start(sceneKey);
            } else {
                this.game.scene.resume(sceneKey);
            }
            
            // Update current UI state
            this.currentUI = sceneKey === 'BattleScene' ? 'battle' : 'phaser';
            console.log(`UIManager: Switched to Phaser UI (${sceneKey})`);
        } catch (error) {
            console.error(`UIManager: Error starting scene ${sceneKey}`, error);
        }
    }
    
    /**
     * Start a battle with the specified teams in Phaser
     * @param {Array} playerTeam - The player's team
     * @param {Array} enemyTeam - The enemy team
     */
    startBattleInPhaser(playerTeam, enemyTeam) {
        // Show Phaser UI with BattleScene
        this.showPhaserUI('BattleScene');
        
        // Get reference to BattleScene
        const battleScene = this.game.scene.getScene('BattleScene');
        if (battleScene) {
            // Start the battle
            battleScene.startBattle(playerTeam, enemyTeam);
        }
    }
}

